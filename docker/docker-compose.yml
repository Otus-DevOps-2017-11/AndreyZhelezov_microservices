version: '3.4'
services:

  post_db:
    image: mongo:3.2
    deploy:
      placement:
        constraints:
          - node.labels.reliability == high
    volumes:
      - post_db:/data/db
    networks:
      back_net:
        aliases:
          - post_db
          - comment_db

  ui:
    image: ${USERNAME}/ui:${UI_VER}
    deploy:
      restart_policy: 
        condition: on-failure 
        max_attempts: 3
        delay: 3s
      resources:
        limits:
          cpus: ${UI_CPUS}
          memory: ${UI_MEM}
      mode: replicated
      replicas: ${UI_REPLICAS}
      update_config:
        delay: 5s
        parallelism: 1
        failure_action: pause
      placement:
        constraints:
          - node.role == worker
    environment:
      - POST_SERVICE_HOST=post
      - POST_SERVICE_PORT=${POST_C_PORT}
      - COMMENT_SERVICE_HOST=comment
      - COMMENT_SERVICE_PORT=${COMMENT_C_PORT}
    ports:
      - ${UI_H_PORT}:${UI_C_PORT}/tcp
    networks:
      - front_net

  post:
    image: ${USERNAME}/post:${POST_VER}
    deploy:
      restart_policy: 
        condition: on-failure 
        max_attempts: 12
        delay: 1s
      resources:
        limits:
          cpus: ${POST_CPUS}
          memory: ${POST_MEM}
      mode: replicated
      replicas: ${POST_REPLICAS}
      update_config:
        delay: 10s
        parallelism: 2
        failure_action: rollback
      placement:
        constraints:
          - node.role == worker
    networks:
      - back_net
      - front_net
    environment:
      - POST_DATABASE_HOST=post_db
      - POST_DATABASE=posts
    depends_on:
      - post_db
    ports:
      - ${POST_H_PORT}:${POST_C_PORT}

  comment:
    image: ${USERNAME}/comment:${COMMENT_VER}
    deploy:
      restart_policy: 
        condition: on-failure 
        max_attempts: 12
        delay: 1s
      resources:
        limits:
          cpus: ${COMMENT_CPUS}
          memory: ${COMMENT_MEM}
      mode: replicated
      replicas: ${COMMENT_REPLICAS}
      update_config:
        delay: 10s
        parallelism: 2
        failure_action: rollback
      placement:
        constraints:
          - node.role == worker
    networks:
      - front_net
      - back_net

volumes:
  post_db: {}

networks:
  front_net: {}
  back_net: {}
